<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 瞎扯中的山坡驴</title>
    <link>https://sempr.github.io/posts/</link>
    <description>Recent content in Posts on 瞎扯中的山坡驴</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 16 Sep 2019 10:52:36 +0800</lastBuildDate><atom:link href="https://sempr.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何开通淘宝客账号并且获取到pid</title>
      <link>https://sempr.github.io/posts/weixin-bot/</link>
      <pubDate>Mon, 16 Sep 2019 10:52:36 +0800</pubDate>
      
      <guid>https://sempr.github.io/posts/weixin-bot/</guid>
      <description>  开通账号
访问淘宝联盟，用淘宝账号登录，此处推荐使用手机淘宝扫码登录
  创建推广渠道
访问媒体管理，创建一个导购推广，内容随便填写。
如果有遇到需要实名认证的，请参照提示操作，首次开通可能需要一个小时左右(实际可能很快)，等开通后可继续下一步。
  创建推广位
访问我要推广，鼠标随便放到一个商品上，会看到有&amp;quot;立即推广&amp;quot;的按钮，点一下，会弹出窗口，从上到下分别选择 导购推广&amp;gt;刚才创建的导购名称-&amp;gt;新建推广位-&amp;gt;随便写个名字，点确定
  获取pid
访问推广位管理，复制pid一列的内容
  </description>
    </item>
    
    <item>
      <title>修复python升级后导致的virtualenv中的python无法正常运行</title>
      <link>https://sempr.github.io/posts/fix-broken-virtualenv-python/</link>
      <pubDate>Tue, 15 May 2018 15:08:24 +0800</pubDate>
      
      <guid>https://sempr.github.io/posts/fix-broken-virtualenv-python/</guid>
      <description>去往virtualenv的目录，执行下面的命令
# 确定当前的版本，查找到对应目录的所有软链并且删掉后 重建新的软链 CUR_PY=`readlink bin/python` find . -type l -delete virtualenv . -p $CUR_PY </description>
    </item>
    
    <item>
      <title>重启iptables导致的docker容器工作不正常问题原因及解决方法</title>
      <link>https://sempr.github.io/posts/docker_with_iptables/</link>
      <pubDate>Sat, 31 Mar 2018 10:12:14 +0800</pubDate>
      
      <guid>https://sempr.github.io/posts/docker_with_iptables/</guid>
      <description>阿里云的云盾报了很多次线上用的centos因为有段时间没有更新导致的出现了很多的漏洞需要打补丁，所以在某台机器上做了一把yum upgrade更新系统，完毕之后发现sentry上面突然报了大量的访问超时的错误，这样的事情其实从以往到现在发生过了不只一次了，解决方法都是重启机器，一直也没有云太深究其中的问题，今天下了决心准备云探查一番。
初步的猜测是更新的时候如果更新到了iptables-service，会导致iptables.service的重启，重启会清掉所有的iptables的配置项并且加载系统预置的配置，而docker自己在启动的时候也会加载一批配置项以保证自己的内部容器可以正常使用网络，是否是因为这批iptables的配置项被清掉了导致docker启动的服务无法被外边访问? 实际情况还需要通过实验来判断了。
在阿里云开通了一台按量付费的服务器(最低配置, 4分钱一小时)，安装好iptables和docker开始实验。
  先部署一个容器
docker run -d --restart always -p 8080:80 --name nginx nginx:alpine
  然后测试访问这个nginx
curl http://127.0.0.1:8080/
根据刚才的猜测，这个是可以正常访问得了的
  重启iptables, 测试服务可访问性
systemctl restart iptables
这个时候通过 iptables-save 可以看到配置的条目数量只有几条了，和docker相关的部分全部都被清空了，按之前的猜测，这个时候nginx应该是无法正常访问的，于是我执行了一下curl http://127.0.0.1:8080/，居然可以正常访问，所以之前的猜测是有偏差的。从netstat的信息来看, 8080端口是被一个叫做docker-proxy的进程开启的，和iptables没有什么关联，所以正常访问也算是合情合理的，那到底是什么原因导致的服务挂掉的呢，是不是容器内部的服务连网的能力受限呢？
  测试容器内访问网络的情况
执行了一下 docker exec -ti nginx wget -O- www.baidu.com 果然失败了，失败信息为wget: bad address &#39;www.baidu.com&#39;
  再次重启docker让docker把自己的那堆iptables配置重新生效之后，执行上一步的命令可以正常访问网络了。
  所以，问题现在应该算是已经找到了，确实是iptables.service的服务重启导致清理掉了可以让容器内部访问外部网络的能力失效，直接的解决办法很简单，在iptables服务重启的时候，手动的把docker重启一把就可以了。
那么，有没有更加方便的办法让docker自动的跟着iptables.service重启呢? 办法是有的，在centos中，配置一下systemd的启动参数，让iptables的重启自动的把docker重启一下即可。
下面是docker的systemd配置文件中的Unit模块的配置，最后一行是
[Unit] Description=Docker Application Container Engine Documentation=https://docs.docker.com After=network-online.target firewalld.service iptables.service Wants=network-online.</description>
    </item>
    
    <item>
      <title>利用Travis CI自动部署hugo生成的静态页面到github pages</title>
      <link>https://sempr.github.io/posts/hugo_travisci_github_pages/</link>
      <pubDate>Sun, 25 Mar 2018 20:04:47 +0800</pubDate>
      
      <guid>https://sempr.github.io/posts/hugo_travisci_github_pages/</guid>
      <description>过程其实挺简单的，在github生成一个token给travis ci使用 直接写个脚本从github上把hugo的二进制文件下载下来在blog的根目录下运行即可得到public目录下要部署的所有静态文件
然后再利用travis ci提供的GitHub Page Deployment 的文档配置一下，指定要部署的目标即可。
相关代码如下
.travis.yml
language: bash script: ./build.sh deploy: provider: pages skip-cleanup: true github-token: $GITHUB_TOKEN keep-history: false repo: sempr/sempr.github.io target-branch: master on: branch: master local-dir: public verbose: true build.sh
#!/bin/bash DIR=&amp;quot;$( cd &amp;quot;$( dirname &amp;quot;$BASH_SOURCE[0]&amp;quot; )&amp;quot; &amp;amp;&amp;amp; pwd )&amp;quot; cd &amp;quot;$DIR&amp;quot; git submodule init git submodule update --remote wget -qO- https://github.com/gohugoio/hugo/releases/download/v0.37.1/hugo_0.37.1_Linux-64bit.tar.gz | tar xvz ./hugo </description>
    </item>
    
    <item>
      <title>MTR v0.92(以及后续版本) 在mac下的非root帐号下使用</title>
      <link>https://sempr.github.io/posts/mtr_none_root_mac/</link>
      <pubDate>Mon, 26 Jun 2017 16:17:45 +0800</pubDate>
      
      <guid>https://sempr.github.io/posts/mtr_none_root_mac/</guid>
      <description>长话短说，解决方法是
cd /usr/local/Cellar/mtr/0.94_1/sbin/ sudo chmod u+s mtr-packet sudo chown root mtr-packet # 确保是这样一个状态 $ ls -lh total 184K -r-xr-xr-x 1 Sempr 110K Jan 2 22:35 mtr -r-sr-xr-x 1 root 71K Sep 24 2020 mtr-packet mtr 是一个非常好用的 ping+traceroute 的工具，在 MacOS 下 升级了 0.92 版本之后，参照网上说的使用chmod u+s 的方式反复多次都无法让它在日常帐号下使用，必须得 sudo 才能好，每次都会报 mtr should not run suid错误，非常的疑惑，网上也无法查得到解决办法。所以只能去看看代码里发生了什么事情。
从代码里看，mtr.c 中 直接有这么一个片段
723 724 725 726 727 728 729 730  /_ mtr used to be suid root.</description>
    </item>
    
    <item>
      <title>Mongodb的count不走索引的问题及解决</title>
      <link>https://sempr.github.io/posts/mongodb_index_hint/</link>
      <pubDate>Sun, 25 Jun 2017 16:16:32 +0800</pubDate>
      
      <guid>https://sempr.github.io/posts/mongodb_index_hint/</guid>
      <description>线上有个用户访问我们站点一直超时，sentry记录了挂在了这么一行操作上db.XXXX.count({xx:yy})，这个看着挺奇怪的，xx这个字段我明明是加过索引的啊，怎么会没走这个索引呢。用explain调试的时候也说正常走了那个索引的，实际上并不像是正常走了的样子。
直到看到了这里
count操作居然支持一个叫做hint的操作，可以指定使用哪个索引，加上hint之后，这个结果居然可以秒出，不加就要消耗非常久的时候，久到30秒还跑不完的情况，总是感觉似乎他是跑去扫了个全表。
本以为这些知名的数据库啊，开源软件啊，可以信任的程度是蛮高的，但实际上也时不时的被各种坑一把，hint这个参数估计应该也是他们处理不好这样的问题而提供的临时替代方案吧，我自动的选索引搞不好我可以提供一个口子让你手动选啊…… 好有道理的样子</description>
    </item>
    
    <item>
      <title>Pillow给图片打水印透明度叠加问题</title>
      <link>https://sempr.github.io/posts/pillow_dup_opacity/</link>
      <pubDate>Sun, 18 Jun 2017 16:12:16 +0800</pubDate>
      
      <guid>https://sempr.github.io/posts/pillow_dup_opacity/</guid>
      <description>博主在给图片打透明水印的时候，发现了一个很诡异的现象，明明透明度的设置是0.8，但处理完的图片的透明度和实际上css在网页上渲染出来的透明度用肉眼就能看得出来是完全不一样的两个透明度，一直很疑惑，后来看代码并且查看Pillow文档才发现了其中的玄机。
参看Image.paste教程链接
其中是这么写的
Image.paste(im, box=None, mask=None) Pastes another image into this image. The box argument is either a 2-tuple giving the upper left corner, a 4-tuple defining the left, upper, right, and lower pixel coordinate, or None (same as (0, 0)). If a 4-tuple is given, the size of the pasted image must match the size of the region. If the modes don’t match, the pasted image is converted to the mode of this image (see the convert() method for details).</description>
    </item>
    
    <item>
      <title>不靠谱的busybox</title>
      <link>https://sempr.github.io/posts/the_fucking_busybox/</link>
      <pubDate>Mon, 18 Apr 2016 11:39:50 +0800</pubDate>
      
      <guid>https://sempr.github.io/posts/the_fucking_busybox/</guid>
      <description>山坡驴最近用docker搭了一个公司的开发环境(python)，自我感觉挺良好的，但是同事不停的向我抱怨经常改了代码之后，python自带的auto reload会执行，但是执行完了之后修改并没有生效，山坡驴同学于是决定去探究一下到底是个什么鬼……
简单说一下这个环境的状况，山坡驴是在Mac下面开发的，用docker-machine和virtualbox跑的docker，从最外层到最里层分别是
Mac(macos) -&amp;gt; virtualbox(tinylinux/boot2docker) -&amp;gt; docker(alpine) 代码在Mac下面编辑，透过两层文件映射到最终的执行环境中，山坡驴觉得一定是这两层文件的映射出了问题，下面我开始查看到底是个什么原因导致了这样的问题，我先从中间这一层入手。
在最外层执行了一句 for i in `seq 1 100`; do echo $i; echo $i&amp;gt;&amp;gt;test.log; sleep 3;done
使用 docker-machine ssh machine-name 进入到中间一层查看，在tail -f test.log的时候居然神奇的发现 内容居然不更新了……更新了……新了……了……，执行wc -l  和 cat test.log | wc -l发现结果居然还不一样，用vi命令打开文件也正常，md5sum出来的文件md5值也和外面一样的，这是什么鬼？
我开始怀疑是不是virtualbox的坑，因为之前有见过一个nginx的sendfile的坑，再加上virtualbox一直以来也是存在着各种各样的bug，而且公司的另外一个团队也在这么用，如果我遇上这个坑了，那么他们应该也一样会遇到的，找他们咨询了一下，他们一脸懵懵的表示没有过啊，一直好好的，非常正常，他们使用的PHP语言也是执行时才解释的语言，我遇到的问题他们应该一样会遇到的才是啊，难道在PHP是最好的语言的光环之下，灵异事件自动退散？这不可能……
重新打包了一个centos的镜象，直接进到第三层，docker container里面测试，发现居然全都是好的，返回到第二次，还是一样的问题，如果说是vbox的锅，那么为什么中间层错了最里层居然还是对的，这不应该，再仔细想了想，tinylinux和alpine默认的shell都是busybox，是不是这货的锅呢？带着这个疑问我去alpine的docker container里做测试，果然还是出错的，那这样子结果就明了了，busybox在这种情况下无法追踪到文件的修改，所以在这样的测试环境下面，还是老老实实的用bash以及各类unix工具吧，慎用busybox。
完毕</description>
    </item>
    
    <item>
      <title>生成随机密码</title>
      <link>https://sempr.github.io/posts/random_password/</link>
      <pubDate>Mon, 29 Feb 2016 08:49:25 +0800</pubDate>
      
      <guid>https://sempr.github.io/posts/random_password/</guid>
      <description>山坡驴近来折腾各种服务器和软件比较多，各种需要生成随机密码，在网上找到了一个生成密码的命令，在这里记录一下
cat /dev/urandom | tr -dc &amp;#39;a-zA-Z0-9&amp;#39; | fold -w 10 | head -1 在Mac下面会遇到如下的错误 Sempr@fred % tr -dc &amp;#39;a-zA-Z0-9&amp;#39; &amp;lt; /dev/urandom| fold -w 10 | head -1 tr: Illegal byte sequence
解决方案也很简单，最前面加一下LC_CTYPE=C
LC_CTYPE=C tr -dc &amp;#39;a-zA-Z0-9&amp;#39; &amp;lt; /dev/urandom| fold -w 10 | head -1 </description>
    </item>
    
    <item>
      <title>山坡驴准备一本正经的瞎扯了，至于能坚持多久，看看吧</title>
      <link>https://sempr.github.io/posts/first/</link>
      <pubDate>Sun, 28 Feb 2016 22:14:15 +0800</pubDate>
      
      <guid>https://sempr.github.io/posts/first/</guid>
      <description>山坡驴不是一个做事情很有毅力的人，想过很多次要认真写博客的，半途而废了很多回，这次决定肯定又是一个偶然，一年之后看看能写多少吧！
请给山坡驴一些掌声!!</description>
    </item>
    
  </channel>
</rss>
